import Head from "next/head";
import { useEffect, useState } from "react";
import { Inter } from "next/font/google";
import styles from "./Home.module.scss";
import Button from "@mui/material/Button";
import data from "../data.json";
import Select from "@mui/material/Select";
import MenuItem from "@mui/material/MenuItem";
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";
import { SelectChangeEvent } from "@mui/material/Select";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [images, setImages] = useState<string[]>([]);
  const [selectedCategory, setSelectedCategory] = useState("");
  const [filteredImages, setFilteredImages] = useState<string[]>([]);

  useEffect(() => {
    const fetchImages = async () => {
      const imagePromises = data.map(async (item) => {
        try {
          const response = await fetch(item.url);
          if (!response.ok) {
            throw new Error(`Network response was not ok for URL: ${item.url}`);
          }
          return response.url;
        } catch (error) {
          console.error("Error fetching data:", error);
          return null;
        }
      });

      const imageUrls = await Promise.all(imagePromises);
      setImages(
        imageUrls.filter((url) => url !== null).filter(Boolean) as string[]
      );
    };

    fetchImages();
  }, []);

  useEffect(() => {
    if (selectedCategory) {
      const filtered = data
        .filter((item) => item.category === selectedCategory)
        .map((item) => item.url);
      setFilteredImages(filtered);
    } else {
      setFilteredImages(images);
    }
  }, [selectedCategory, images]);

  const imagesWithDates = filteredImages.map((imageUrl) => {
    const imageInfo = data.find((item) => item.url === imageUrl);
    return imageInfo ? { url: imageUrl, date: imageInfo.date } : null;
  });

  const handleChangeCategory = (event: SelectChangeEvent<string>) => {
    setSelectedCategory(event.target.value);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <FormControl className={styles.form} fullWidth>
          <InputLabel id="demo-simple-select-label">Category</InputLabel>
          <Select
            labelId="demo-simple-select-label"
            id="demo-simple-select"
            value={selectedCategory}
            label="Category"
            onChange={handleChangeCategory}
          >
            <MenuItem value="">All</MenuItem>
            <MenuItem value="Sea">Sea</MenuItem>
            <MenuItem value="Mountains">Mountains</MenuItem>
            <MenuItem value="Desert">Desert</MenuItem>
          </Select>
        </FormControl>
        <div className={styles.btnWrapper}>
          <span> Sort by: </span>

          <Button className={styles.btn} variant="contained">
            Date added
          </Button>
        </div>

        <div className={styles.imgWrapper}>
          {imagesWithDates.map((item, index) => (
            <div key={index} className={styles.imgContainer}>
              <img
                className={styles.img}
                src={item?.url}
                alt={`Image ${index + 1}`}
              />
              {item && item.date ? (
                <span className={styles.imgDate}>{item.date}</span>
              ) : null}
            </div>
          ))}
        </div>
      </main>
    </>
  );
}

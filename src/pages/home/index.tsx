import Head from "next/head";
import { useEffect, useState } from "react";
import { Inter } from "next/font/google";
import styles from "./Home.module.scss";
import { createApi } from "unsplash-js";
import Select from "@mui/material/Select";
import MenuItem from "@mui/material/MenuItem";
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";
import { SelectChangeEvent } from "@mui/material/Select";
import CircularProgress from "@mui/material/CircularProgress";

const inter = Inter({ subsets: ["latin"] });

const api = createApi({
  accessKey: "EhjvvcJgvqyWAcLKATC7VL5yXnP8lG_1gaaRfp5PNX8",
});

enum ESortDirection {
  ASC = "asc",
  DESC = "desc",
}

type TPhoto = {
  alt_description: string;
  created_at: string;
  description: string;
  id: string;
  likes: number;
  url: string;
};

export default function Home() {
  const [isLoading, setLoading] = useState(true);
  const [images, setImages] = useState<TPhoto[]>([]);
  const [selectedCategory, setSelectedCategory] = useState("");
  const [dateSort, setDateSort] = useState<ESortDirection>(ESortDirection.ASC);
  const [likesSort, setLikesSort] = useState<ESortDirection>(
    ESortDirection.ASC
  );

  useEffect(() => {
    if (selectedCategory) {
      api.collections
        .getPhotos({ collectionId: selectedCategory })
        .then((result) => {
          const photos: TPhoto[] =
            result.response?.results.map((item) => ({
              alt_description: item.alt_description || "",
              created_at: item.created_at,
              description: item.description || "",
              id: item.id,
              likes: item.likes,
              url: item.urls.regular,
            })) || [];

          setImages(photos);
        })
        .catch(() => {
          console.log("something went wrong!");
        });
    } else {
      api.search
        .getPhotos({ query: "all", orientation: "landscape" })
        .then((result) => {
          const photos: TPhoto[] =
            result.response?.results.map((item) => ({
              alt_description: item.alt_description || "",
              created_at: item.created_at,
              description: item.description || "",
              id: item.id,
              likes: item.likes,
              url: item.urls.regular,
            })) || [];

          setLoading(false);

          setImages(photos);
        })
        .catch(() => {
          console.log("something went wrong!");
        });
    }
  }, [selectedCategory]);

  useEffect(() => {
    const sortedImages = [...images].sort((a, b) => {
      if (dateSort === ESortDirection.ASC) {
        return (
          new Date(a.created_at).getTime() - new Date(b.created_at).getTime()
        );
      } else {
        return (
          new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
        );
      }
    });

    setImages(sortedImages);
  }, [dateSort]);

  useEffect(() => {
    const sortedImages = [...images].sort((a, b) => {
      if (likesSort === ESortDirection.ASC) {
        return a.likes - b.likes;
      } else {
        return b.likes - a.likes;
      }
    });

    setImages(sortedImages);
  }, [likesSort]);

  console.log("images", images);

  const handleChangeCategory = (event: SelectChangeEvent<string>) => {
    setSelectedCategory(event.target.value);
  };

  const handleDateSort = (event: SelectChangeEvent<ESortDirection>) => {
    setDateSort(event.target.value as ESortDirection);
  };

  const handleLikesSort = (event: SelectChangeEvent<ESortDirection>) => {
    setLikesSort(event.target.value as ESortDirection);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.header}>
          <FormControl className={styles.form} fullWidth>
            <InputLabel id="category-select-label">Category</InputLabel>
            <Select
              labelId="category-select-label"
              id="category-select"
              value={selectedCategory}
              label="Category"
              onChange={handleChangeCategory}
            >
              <MenuItem value="">All</MenuItem>
              <MenuItem value="864008">Sea</MenuItem>
              <MenuItem value="401930">Mountains</MenuItem>
              <MenuItem value="254504">Desert</MenuItem>
            </Select>
          </FormControl>
          <div>
            <div className={styles.selectWrapper}>
              <span className={styles.selectTitle}>Sort by date:</span>
              <Select
                className={styles.form}
                id="date-sort"
                value={dateSort}
                onChange={handleDateSort}
              >
                <MenuItem value={ESortDirection.ASC}>Asc</MenuItem>
                <MenuItem value={ESortDirection.DESC}>Desc</MenuItem>
              </Select>
            </div>
            <div className={styles.selectWrapper}>
              <span className={styles.selectTitle}>Sort by likes:</span>
              <Select
                className={styles.form}
                id="likes-sort"
                value={likesSort}
                onChange={handleLikesSort}
              >
                <MenuItem value={ESortDirection.ASC}>Asc</MenuItem>
                <MenuItem value={ESortDirection.DESC}>Desc</MenuItem>
              </Select>
            </div>
          </div>
        </div>

        {isLoading ? (
          <div className={styles.spinnerWrapper}>
            <CircularProgress className={styles.spinner} />
          </div>
        ) : (
          <div className={styles.imgWrapper}>
            {images?.map((item) => (
              <div key={item.id} className={styles.imgContainer}>
                <img
                  className={styles.img}
                  src={item?.url}
                  alt={item?.alt_description}
                />
                <span className={styles.imgDate}>
                  {new Date(item.created_at).toLocaleString()}
                </span>
                <span className={styles.imgDate}> Likes:{item.likes}</span>
              </div>
            ))}
          </div>
        )}
      </main>
    </>
  );
}
